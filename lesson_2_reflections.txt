--- commands learned ---


git init				Start a new repository
git status				What has changed since the last commit
git add					add files to the repository
git diff				Displays difference between working dir and staging area
git diff --staged			Displays difference between staging area and last commit
git reset --hard			Undo all changes to the working directory and staging area
git branch				list all branches
git branch easy				create a branch called easy
git checkout easy			swith to the easy branch
git log --graph --oneline master coins	view master and coins branches visually
git checkout -b new_branch_name		in a detached head state (prior commit) create a new branch
					This combines two commands
					- git branch new_branch_name		(create new branch)
					- git checkout branch new_branch_name	(enter, checkout this branch)
git merge master coins			Merge the coins branch into the master one
git branch -d coins			Delete the coins branch
git show 012ed34			Only show difference between the commit specified and its originator
					This helps when two branches are merged and commits interweave
git merge --abort			cancel the merge due to issues
					https://classroom.udacity.com/courses/ud775/lessons/2969618657/concepts/29892386280923



- Other -
Best practice for writing commit messages
http://udacity.github.io/git-styleguide/


--- reflection questions ---

Q: What happens when you initialize a repository? Why do you need to do it?
- you tell git to track changes on this directory
- take a snapshot of the files in it
- create the files git needs to track changes

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
- It'll help you to see which files are added to the project, but are not yet added to the repository for tracking.

Q: How can you use the staging area to make sure you have one commit per logical change?
- by running git diff and git diff --staged you can see the updates you've made.
Here the staging area is helping you to see the change easily and can ensure one change is made per commit. The staging area is keeping track of your changes.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- When you are trying out a new feature
- Trying something experimental
- When I'm moving on to a different piece of work
- Easy to switch between tasks

Q: How do the diagrams help you visualize the branch structure?
- you see at what stage new branches are created
- Which projects / features are being worked on

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- two development streams come together into one, both changes / functionality into one

Q: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
- automatically, you don't have to worry about parts added that don't conflict
- manually merge keeps you in control and prevents the wrong merges to be implemented